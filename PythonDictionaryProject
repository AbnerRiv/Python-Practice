#the indexas of names, months, years, max_sustained_winds, areas_affected, damages, and deaths are related. 
#meaning that Cuba I, having a speed up to 165 mph, happened in October 1924 and killed 90 people. Its damage's cost was not recorded. 
# It affected Central America, Mexico, Cuba, Florida, and The Bahamas. 
# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages
def update_damages(old_damages):
  # here, we translate the M's (Millions) and B's (Billions) to actual numbers
  return [float(x[:-1]) * conversion.get(x[-1]) if x[0] != "D" else "Damages not recorded" for x in old_damages]

damages = update_damages(damages) 
print(damages)
# 2 

# This function puts the hurricanes in a dictionary with Names as keys
def construct_dict():
  return {k: 
  # Create a Table
  { "Name": k, 
"Month": months[names.index(k)],
"Year": years[names.index(k)],
"Max Sustained Wind": max_sustained_winds[names.index(k)], 
"Areas Affected" : areas_affected[names.index(k)],
"Damage" : damages[names.index(k)],
"Deaths": deaths[names.index(k)]
  } for k in names}

# Create and view the hurricanes dictionary
print("\n\n")
hurricane_info = construct_dict()
print(hurricane_info)
print("\n\n\n")

# 3
# Organizing by Year
# This function puts the hurricanes in a dictionary with Years as keys
# Its a dictionary of lists 
def convert_by_year(): 
  hurricane_by_year = {}
  for k,v in hurricane_info.items():
    #in case the hasn't been added to the dict.
    if(hurricane_by_year.get(v.get("Year"), 0) == 0):
     hurricane_by_year[v.get("Year")] = [hurricane_info[k]]
    else:
      # otherwise, add another dictionary to the list
       hurricane_by_year[v.get("Year")].append(hurricane_info[k])
  return hurricane_by_year

#function call
hurricane_year = convert_by_year()

# create a new dictionary of hurricanes with year and key  
print(hurricane_year)
print("\n\n")
# 4
# Counting Damaged Areas
def count_all_areas():
  count_damaged_areas = {}
  for k,v in hurricane_info.items():
    for x in v.get("Areas Affected"):
      count_damaged_areas[x] = count_damaged_areas.get(x,0) +1
  return count_damaged_areas
count_areas = count_all_areas()
print(count_areas)
# create dictionary of areas to store the number of hurricanes involved in


# 5 
# Calculating Maximum Hurricane Count
def calc_max_count(hit_areas):
  numbers_first_dict = {v:k for k,v in hit_areas.items()}
  return max(numbers_first_dict), numbers_first_dict[max(numbers_first_dict)]

hurricane_count, max_hit_area= calc_max_count(count_areas)
print("\nThe most affected area is {} with hurricane count of {}".format(max_hit_area, hurricane_count))
# find most frequently affected area and the number of hurricanes involved in


# 6
# Calculating the Deadliest Hurricane
most_deaths = max(deaths)
# find highest mortality hurricane and the number of deaths
deadliest_hurricane = names[deaths.index(most_deaths)]
print(deaths.index(most_deaths))
print("\nThe deadliest hurricane was {} with {} deaths".format(deadliest_hurricane, most_deaths))
# 7
# Rating Hurricanes by Mortality



# categorize hurricanes in new dictionary with mortality severity as key
#do an upper-bound check for the casualties
def clasify_by_death(hurricane_general):
  hurricane_by_mortality = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[]}
  mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

  for k,v in hurricane_general.items():
    current_death = v["Deaths"]
    if current_death > mortality_scale[4]:
      hurricane_by_mortality[5].append(k)

    elif current_death > mortality_scale[3]:
      hurricane_by_mortality[4].append(k)

    elif current_death > mortality_scale[2]:
      hurricane_by_mortality[3].append(k)

    elif current_death > mortality_scale[1]:
      hurricane_by_mortality[2].append(k)

    elif current_death > mortality_scale[0]:
      hurricane_by_mortality[1].append(k)
    
    else:
      hurricane_by_mortality[0].append(k)
  return hurricane_by_mortality

hurricane_classified_death = clasify_by_death(hurricane_info)
print("\n\n")
print(hurricane_classified_death)

# 8 Calculating Hurricane Maximum Damage
print("\n\n")
#We need to get rid of the "Damage not Recorded"
damages_cleansed = [x for x in damages if type(x) != str]
max_damage = max(damages_cleansed)
max_damage_name = names[damages.index(max_damage)]
print("The most destructive hurricane was {0} that cost {1:,}".format(max_damage_name, max_damage))
# find highest damage inducing hurricane and its total cost


# 9
# Rating Hurricanes by Damage
#do an upper-bound check for the damages
def classify_by_damage(hurricane_general):
  hurricane_by_damage = {0:[],1:[],2:[],3:[],4:[],5:[]}
  damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  for k, v in hurricane_general.items():
    try:  #it will throw an exception here because of the "Damage not recorded"
      current_damage = v["Damage"]
      if current_damage > damage_scale[4]:
        hurricane_by_damage[5].append(k)

      elif current_damage > damage_scale[3]:
        hurricane_by_damage[4].append(k)

      elif current_damage > damage_scale[2]:
        hurricane_by_damage[3].append(k)

      elif current_damage > damage_scale[1]:
        hurricane_by_damage[2].append(k)

      elif current_damage > damage_scale[0]:
        hurricane_by_damage[1].append(k)
      
      else:
        hurricane_by_damage[0].append(k)
    except TypeError:
      continue  # go to the next iteration if "Damage not recorded" is found
  return hurricane_by_damage


# categorize hurricanes in new dictionary with damage severity as key
hurricane_classfied_damage = classify_by_damage(hurricane_info)
print(hurricane_classfied_damage)
